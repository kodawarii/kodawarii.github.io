{"version":3,"sources":["Routes/Home.js","Routes/Contact.js","Routes/Codings.js","App.js","serviceWorker.js","index.js"],"names":["Home","className","Component","Contact","Codings","App","to","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ySAEqBA,E,iLAGjB,OACE,yBAAKC,UAAU,QACb,iCAAM,0HAAN,KACA,iCAAM,qDAAN,KACA,iCAAM,sD,GAPoBC,aCAbC,E,iLAGjB,OACE,yBAAKF,UAAU,WACb,6BACE,sCACA,+C,GAP2BC,aCAhBE,E,iLAGjB,OACE,yBAAKH,UAAU,WACb,iCAAM,wCAAN,KACA,4CACA,4CACA,4CACA,iD,GAT6BC,a,MCyCtBG,MAlCf,WACE,OACE,yBAAKJ,UAAU,OACb,kBAAC,IAAD,KACE,gCACE,yBAAKA,UAAU,UACf,wBAAIA,UAAU,aACV,wBAAIA,UAAU,YACZ,kBAAC,IAAD,CAAMK,GAAI,KAAV,mBAIJ,wBAAIL,UAAU,aACZ,wBAAIA,UAAU,YACZ,kBAAC,IAAD,CAAMK,GAAI,YAAV,SAEF,wBAAIL,UAAU,YACZ,kBAAC,IAAD,CAAMK,GAAI,YAAV,eAKR,yBAAKL,UAAU,cACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOM,OAAK,EAACC,KAAK,IAAIC,UAAaT,IACnC,kBAAC,IAAD,CAAOO,OAAK,EAACC,KAAK,WAAWC,UAAYN,IACzC,kBAAC,IAAD,CAAOI,OAAK,EAACC,KAAK,WAAWC,UAAYL,SCvBjCM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3ac4eb9f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class Home extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"home\">\r\n        <div> <h3> Test Automation Engineer gone rogue - Aspiring developer with industry coding experience </h3> </div>\r\n        <div> <h4> Relevant Experience </h4> </div>\r\n        <div> <h4> Projects Intro </h4></div> \r\n      </div>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\r\n\r\nexport default class Contact extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"contact\">\r\n        <div> \r\n          <p> Email </p>\r\n          <p> Linkedin </p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\r\n\r\nexport default class Codings extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"codings\">\r\n        <div> <h3>Projects</h3> </div>\r\n        <div> Project A </div>\r\n        <div> Project B </div>\r\n        <div> Project C </div>\r\n        <div> Project D </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react';\nimport { HashRouter, Switch, Route, Link } from 'react-router-dom';\n\nimport Home from './Routes/Home';\nimport Contact from './Routes/Contact';\nimport Codings from './Routes/Codings';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HashRouter>\n        <header>\n          <nav className=\"navbar\">\n          <ul className=\"navbar-ul\">\n              <li className=\"nav-item\">\n                <Link to={'/'}>Paul Yoon SWE</Link>\n              </li>\n            </ul>\n              \n            <ul className=\"navbar-ul\">\n              <li className=\"nav-item\">\n                <Link to={'/codings'}>Code</Link>\n              </li>\n              <li className=\"nav-item\">\n                <Link to={'/contact'}>Contact</Link>\n              </li>\n            </ul>\n          </nav>\n        </header>\n        <div className=\"switch-div\">\n          <Switch>\n            <Route exact path='/' component = {Home} />\n            <Route exact path='/contact' component={ Contact } />\n            <Route exact path='/codings' component={ Codings } />\n          </Switch>\n        </div>\n      </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}